"""Initial migration

Revision ID: fdba5bb7310e
Revises: 
Create Date: 2025-05-26 23:52:38.435928

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'fdba5bb7310e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('banner_records',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('blob', sa.LargeBinary(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('simfile_records',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('hash', sa.String(length=64), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('hash')
    )
    op.create_table('mix_records',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('slug', sa.Text(), nullable=False),
    sa.Column('system', sa.Text(), nullable=False),
    sa.Column('region', sa.Text(), nullable=False),
    sa.Column('release', sa.Date(), nullable=False),
    sa.Column('banner_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['banner_id'], ['banner_records.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('banner_id'),
    sa.UniqueConstraint('slug')
    )
    op.create_table('song_records',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('mix_id', sa.Uuid(), nullable=False),
    sa.Column('banner_id', sa.Uuid(), nullable=True),
    sa.Column('title', sa.Text(), nullable=True),
    sa.Column('slug', sa.Text(), nullable=False),
    sa.Column('artist', sa.Text(), nullable=True),
    sa.Column('title_translit', sa.Text(), nullable=True),
    sa.Column('artist_translit', sa.Text(), nullable=True),
    sa.Column('samplestart', sa.Float(), nullable=True),
    sa.Column('samplelength', sa.Float(), nullable=True),
    sa.Column('displaybpm', sa.Text(), nullable=True),
    sa.Column('stops', sa.Text(), nullable=True),
    sa.Column('bpms', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['banner_id'], ['banner_records.id'], ),
    sa.ForeignKeyConstraint(['id'], ['simfile_records.id'], ),
    sa.ForeignKeyConstraint(['mix_id'], ['mix_records.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('banner_id'),
    sa.UniqueConstraint('slug')
    )
    op.create_table('chart_records',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('song_id', sa.Uuid(), nullable=False),
    sa.Column('stepstype', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('difficulty', sa.Text(), nullable=True),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['song_id'], ['song_records.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('single_chart_records',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('length_seconds', sa.Float(), nullable=True),
    sa.Column('display_bpm_min', sa.Float(), nullable=True),
    sa.Column('display_bpm_max', sa.Float(), nullable=True),
    sa.Column('true_bpm_min', sa.Float(), nullable=True),
    sa.Column('true_bpm_max', sa.Float(), nullable=True),
    sa.Column('bpm_changes', sa.Integer(), nullable=True),
    sa.Column('stops', sa.Integer(), nullable=True),
    sa.Column('artist', sa.String(), nullable=True),
    sa.Column('steps', sa.Integer(), nullable=True),
    sa.Column('jumps', sa.Integer(), nullable=True),
    sa.Column('holds', sa.Integer(), nullable=True),
    sa.Column('shock_arrows', sa.Integer(), nullable=True),
    sa.Column('hands', sa.Integer(), nullable=True),
    sa.Column('crossovers', sa.Integer(), nullable=True),
    sa.Column('footswitches', sa.Integer(), nullable=True),
    sa.Column('sideswitches', sa.Integer(), nullable=True),
    sa.Column('jacks', sa.Integer(), nullable=True),
    sa.Column('brackets', sa.Integer(), nullable=True),
    sa.Column('total_stream', sa.Integer(), nullable=True),
    sa.Column('max_nps', sa.Float(), nullable=True),
    sa.Column('display_bpm_diff', sa.Float(), nullable=True),
    sa.Column('true_bpm_diff', sa.Float(), nullable=True),
    sa.Column('bpm_min_diff', sa.Float(), nullable=True),
    sa.Column('bpm_max_diff', sa.Float(), nullable=True),
    sa.Column('bpm_total_diff', sa.Float(), nullable=True),
    sa.Column('bpm_changes_plus_stops', sa.Integer(), nullable=True),
    sa.Column('steps_plus_jumps', sa.Integer(), nullable=True),
    sa.Column('jumps_minus_brackets', sa.Integer(), nullable=True),
    sa.Column('steps_plus_jumps_minus_brackets', sa.Integer(), nullable=True),
    sa.Column('jumps_per_steps', sa.Float(), nullable=True),
    sa.Column('brackets_per_jumps', sa.Float(), nullable=True),
    sa.Column('jumps_minus_brackets_per_steps', sa.Float(), nullable=True),
    sa.Column('holds_per_steps', sa.Float(), nullable=True),
    sa.Column('shock_arrows_per_step', sa.Float(), nullable=True),
    sa.Column('hands_per_steps', sa.Float(), nullable=True),
    sa.Column('crossovers_per_steps', sa.Float(), nullable=True),
    sa.Column('footswitches_per_steps', sa.Float(), nullable=True),
    sa.Column('sideswitches_per_steps', sa.Float(), nullable=True),
    sa.Column('jacks_per_steps', sa.Float(), nullable=True),
    sa.Column('bpm_changes_per_second', sa.Float(), nullable=True),
    sa.Column('stops_per_second', sa.Float(), nullable=True),
    sa.Column('bpm_changes_plus_stops_per_second', sa.Float(), nullable=True),
    sa.Column('steps_per_second', sa.Float(), nullable=True),
    sa.Column('jumps_per_second', sa.Float(), nullable=True),
    sa.Column('steps_plus_jumps_per_second', sa.Float(), nullable=True),
    sa.Column('brackets_per_second', sa.Float(), nullable=True),
    sa.Column('jumps_minus_brackets_per_second', sa.Float(), nullable=True),
    sa.Column('steps_plus_jumps_minus_brackets_per_second', sa.Float(), nullable=True),
    sa.Column('holds_per_second', sa.Float(), nullable=True),
    sa.Column('shock_arrows_per_second', sa.Float(), nullable=True),
    sa.Column('hands_per_second', sa.Float(), nullable=True),
    sa.Column('crossovers_per_second', sa.Float(), nullable=True),
    sa.Column('footswitches_per_second', sa.Float(), nullable=True),
    sa.Column('sideswitches_per_second', sa.Float(), nullable=True),
    sa.Column('jacks_per_second', sa.Float(), nullable=True),
    sa.Column('footswitches_minus_sideswitches', sa.Integer(), nullable=True),
    sa.Column('footswitches_minus_sideswitches_per_steps', sa.Float(), nullable=True),
    sa.Column('footswitches_minus_sideswitches_per_second', sa.Float(), nullable=True),
    sa.Column('crossovers_plus_footswitches', sa.Integer(), nullable=True),
    sa.Column('crossovers_plus_footswitches_plus_jacks', sa.Integer(), nullable=True),
    sa.Column('crossovers_plus_footswitches_per_steps', sa.Float(), nullable=True),
    sa.Column('crossovers_plus_footswitches_plus_jacks_per_steps', sa.Float(), nullable=True),
    sa.Column('crossovers_plus_footswitches_per_second', sa.Float(), nullable=True),
    sa.Column('crossovers_plus_footswitches_plus_jacks_per_second', sa.Float(), nullable=True),
    sa.Column('jumps_holds_shocks_cross_foots_jacks', sa.Integer(), nullable=True),
    sa.Column('jumps_holds_shocks_cross_foots_jacks_per_step', sa.Float(), nullable=True),
    sa.Column('jumps_holds_shocks_cross_foots_jacks_per_second', sa.Float(), nullable=True),
    sa.Column('full_obj_total', sa.Integer(), nullable=True),
    sa.Column('full_obj_total_per_second', sa.Float(), nullable=True),
    sa.Column('estimate_difficulty', sa.Float(), nullable=True),
    sa.Column('alt_estimate_difficulty', sa.Float(), nullable=True),
    sa.Column('real_world_difficulty', sa.Float(), nullable=True),
    sa.Column('folder_difficulty', sa.Float(), nullable=True),
    sa.Column('spice_rating', sa.Float(), nullable=True),
    sa.Column('max_combo', sa.Integer(), nullable=True),
    sa.Column('score_per_marv_ok', sa.Float(), nullable=True),
    sa.Column('score_per_perf', sa.Float(), nullable=True),
    sa.Column('score_per_great', sa.Float(), nullable=True),
    sa.Column('score_per_good', sa.Float(), nullable=True),
    sa.Column('max_ex_score', sa.Integer(), nullable=True),
    sa.Column('lines_with_holds', sa.Integer(), nullable=True),
    sa.Column('oks_total', sa.Integer(), nullable=True),
    sa.Column('holds_ignored', sa.Integer(), nullable=True),
    sa.Column('score_from_steps', sa.Integer(), nullable=True),
    sa.Column('score_from_holds', sa.Integer(), nullable=True),
    sa.Column('score_from_shocks', sa.Integer(), nullable=True),
    sa.Column('score_from_oks', sa.Integer(), nullable=True),
    sa.Column('aa_min_precision', sa.Float(), nullable=True),
    sa.Column('aa_min_judgment', sa.String(), nullable=True),
    sa.Column('aa_max_misses', sa.Integer(), nullable=True),
    sa.Column('aaa_min_precision', sa.Float(), nullable=True),
    sa.Column('aaa_min_judgment', sa.String(), nullable=True),
    sa.Column('aaa_max_misses', sa.Integer(), nullable=True),
    sa.Column('combo_per_step', sa.Float(), nullable=True),
    sa.Column('ex_score_per_step', sa.Float(), nullable=True),
    sa.Column('lines_with_holds_per_step', sa.Float(), nullable=True),
    sa.Column('oks_per_step', sa.Float(), nullable=True),
    sa.Column('holds_ignored_per_hold', sa.Float(), nullable=True),
    sa.Column('combo_per_second', sa.Float(), nullable=True),
    sa.Column('ex_score_per_second', sa.Float(), nullable=True),
    sa.Column('lines_with_holds_per_second', sa.Float(), nullable=True),
    sa.Column('oks_per_second', sa.Float(), nullable=True),
    sa.Column('holds_ignored_per_second', sa.Float(), nullable=True),
    sa.Column('left_notes', sa.Integer(), nullable=True),
    sa.Column('down_notes', sa.Integer(), nullable=True),
    sa.Column('up_notes', sa.Integer(), nullable=True),
    sa.Column('right_notes', sa.Integer(), nullable=True),
    sa.Column('lopsided_max', sa.Float(), nullable=True),
    sa.Column('lopsided_mean', sa.Float(), nullable=True),
    sa.Column('left_right_bias', sa.Float(), nullable=True),
    sa.Column('down_up_bias', sa.Float(), nullable=True),
    sa.Column('horiz_vert_bias', sa.Float(), nullable=True),
    sa.Column('notes_4th', sa.Integer(), nullable=True),
    sa.Column('notes_8th', sa.Integer(), nullable=True),
    sa.Column('notes_12th', sa.Integer(), nullable=True),
    sa.Column('notes_16th', sa.Integer(), nullable=True),
    sa.Column('notes_20th', sa.Integer(), nullable=True),
    sa.Column('notes_24th', sa.Integer(), nullable=True),
    sa.Column('notes_32nd', sa.Integer(), nullable=True),
    sa.Column('notes_48th', sa.Integer(), nullable=True),
    sa.Column('notes_64th', sa.Integer(), nullable=True),
    sa.Column('notes_96th', sa.Integer(), nullable=True),
    sa.Column('notes_192nd', sa.Integer(), nullable=True),
    sa.Column('most_frequent_quantization', sa.String(), nullable=True),
    sa.Column('finest_quantization', sa.String(), nullable=True),
    sa.Column('mean_quantization', sa.Float(), nullable=True),
    sa.Column('quantization_power_of_two_bias', sa.Float(), nullable=True),
    sa.Column('quantization_variety', sa.Float(), nullable=True),
    sa.Column('stream_official', sa.Float(), nullable=True),
    sa.Column('voltage_official', sa.Float(), nullable=True),
    sa.Column('air_official', sa.Float(), nullable=True),
    sa.Column('freeze_official', sa.Float(), nullable=True),
    sa.Column('chaos_official', sa.Float(), nullable=True),
    sa.Column('radar_total_official', sa.Float(), nullable=True),
    sa.Column('stream_official_pct', sa.Float(), nullable=True),
    sa.Column('voltage_official_pct', sa.Float(), nullable=True),
    sa.Column('air_official_pct', sa.Float(), nullable=True),
    sa.Column('freeze_official_pct', sa.Float(), nullable=True),
    sa.Column('chaos_official_pct', sa.Float(), nullable=True),
    sa.Column('stream_estimated', sa.Float(), nullable=True),
    sa.Column('voltage_estimated', sa.Float(), nullable=True),
    sa.Column('air_estimated', sa.Float(), nullable=True),
    sa.Column('freeze_estimated', sa.Float(), nullable=True),
    sa.Column('chaos_estimated', sa.Float(), nullable=True),
    sa.Column('radar_total_estimated', sa.Float(), nullable=True),
    sa.Column('stream_estimated_pct', sa.Float(), nullable=True),
    sa.Column('voltage_estimated_pct', sa.Float(), nullable=True),
    sa.Column('air_estimated_pct', sa.Float(), nullable=True),
    sa.Column('freeze_estimated_pct', sa.Float(), nullable=True),
    sa.Column('chaos_estimated_pct', sa.Float(), nullable=True),
    sa.Column('stream_diff', sa.Float(), nullable=True),
    sa.Column('voltage_diff', sa.Float(), nullable=True),
    sa.Column('air_diff', sa.Float(), nullable=True),
    sa.Column('freeze_diff', sa.Float(), nullable=True),
    sa.Column('chaos_diff', sa.Float(), nullable=True),
    sa.Column('radar_total_diff', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['chart_records.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('single_chart_records')
    op.drop_table('chart_records')
    op.drop_table('song_records')
    op.drop_table('mix_records')
    op.drop_table('simfile_records')
    op.drop_table('banner_records')
    # ### end Alembic commands ###
